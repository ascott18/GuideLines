<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ .. \FrameXML\UI.xsd">
	
	<!-- PARENT -->
	
	<Frame name="GuideLines" parent="UIParent" setAllPoints="true" hidden="true">
		<Scripts>
			<OnLoad>
				SLASH_GUIDELINES1, SLASH_GUIDELINES2 = "/guidelines", "/guides"
				function SlashCmdList.GUIDELINES() 
					if self:IsShown() then
						self:Hide()
					else
						self:Show()
					end
				end
				self.rulersize = 20
				self.guidesize = 5
			</OnLoad>
		</Scripts>
	</Frame>
	
	<!-- TEMPLATES -->
	
	<Button name="GuideLines_GuideTemplate" virtual="true" clampedToScreen="true" movable="true">
		<Layers>
			<Layer level="ARTWORK">
				<Texture setAllPoints="true" parentKey="tex">
					<Color r="0" g="0" b="0" a="1"/>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
				if not GuideLines.dragging or GuideLines.dragging == self then
					self.tex:SetTexture(.25,.92,1,1)
				end
			</OnEnter>
			<OnMouseDown>
				self.lockhighlight = 1
			</OnMouseDown>
			<OnMouseUp>
				self.lockhighlight = nil
			</OnMouseUp>
			<OnLeave>
				if not self.lockhighlight then
					self.tex:SetTexture(0,0,0,1)
				end
			</OnLeave>
			<OnDragStart>
				self:StartMoving()
				self.lockhighlight = nil
				GuideLines.dragging = guide
			</OnDragStart>
		</Scripts>
	</Button>
	
	<Button name="GuideLines_VertGuideTemplate" virtual="true" inherits="GuideLines_GuideTemplate">
		<Scripts>
			<OnDragStop>
				local X, Y = GetCursorPosition()
				if
					(self:GetParent().point == -1 and X &lt; GuideLines.rulersize + GuideLines.guidesize/2) or
					(self:GetParent().point == 1 and GetScreenWidth()*UIParent:GetScale() - X &lt; GuideLines.rulersize + GuideLines.guidesize/2)
				then
					self:Hide() 
				end
				
				self:StopMovingOrSizing()
				self.lockhighlight = nil
				GuideLines.dragging = nil
			</OnDragStop>
			<OnUpdate>
				if IsMouseButtonDown("LeftButton") then
					self:SetPoint("TOPLEFT", UIParent, "TOPLEFT", GetCursorPosition()/UIParent:GetScale()-GuideLines.guidesize/2, 0)
				else
					self:SetScript("OnUpdate", nil)
					self.lockhighlight = nil
					GuideLines.dragging = nil
					if GetMouseFocus() == self then
						self:GetScript("OnEnter")(self)
					else
						self:GetScript("OnLeave")(self)
					end
				end
			</OnUpdate>
			<OnLoad>
				self:RegisterForDrag("LeftButton")
				
				self:SetSize(GuideLines.guidesize, GetScreenHeight())
				self:SetPoint("TOPLEFT", UIParent)
				
				local inset = min(0, GuideLines.guidesize-5)
				self:SetHitRectInsets(inset, inset, 0, 0)
				self:SetFrameLevel(self:GetParent():GetFrameLevel() - 1)
				
				self.lockhighlight = 1
				GuideLines.dragging = self
				
			</OnLoad>
		</Scripts>
	</Button>
	
	<Button name="GuideLines_HorizGuideTemplate" virtual="true" inherits="GuideLines_GuideTemplate">
		<Scripts>
			<OnDragStop>
				local X, Y = GetCursorPosition()
				if
					(self:GetParent().point == -1 and GetScreenHeight()*UIParent:GetScale() - Y &lt; GuideLines.rulersize + GuideLines.guidesize/2) or
					(self:GetParent().point == 1 and Y &lt; GuideLines.rulersize + GuideLines.guidesize/2)
				then
					self:Hide()
				end
				
				self:StopMovingOrSizing()
				self.lockhighlight = nil
				GuideLines.dragging = nil
			</OnDragStop>
			<OnUpdate>
				if IsMouseButtonDown("LeftButton") then
					self:SetPoint("BOTTOMLEFT", UIParent, "BOTTOMLEFT", 0, select(2, GetCursorPosition())/UIParent:GetScale()-GuideLines.guidesize/2)
				else
					self:SetScript("OnUpdate", nil)
					self.lockhighlight = nil
					GuideLines.dragging = nil
					if GetMouseFocus() == self then
						self:GetScript("OnEnter")(self)
					else
						self:GetScript("OnLeave")(self)
					end
				end
			</OnUpdate>
			<OnLoad>
				self:RegisterForDrag("LeftButton")
				
				self:SetSize(GetScreenWidth(), GuideLines.guidesize)
				self:SetPoint("BOTTOMLEFT", UIParent)
				
				local inset = min(0, GuideLines.guidesize-5)
				self:SetHitRectInsets(0, 0, inset, inset)
				self:SetFrameLevel(self:GetParent():GetFrameLevel() - 1)
				
				self.lockhighlight = 1
				GuideLines.dragging = self
				
			</OnLoad>
		</Scripts>
	</Button>
	
	<Button name="GuideLines_RulerTemplate" virtual="true" parent="GuideLines" frameStrata="FULLSCREEN_DIALOG" enableMouse="true" frameLevel="100">
		<Layers>
			<Layer level="ARTWORK">
				<Texture setAllPoints="true" parentKey="tex">
					<Color r=".85" g=".92" b="1" a="1"/>
				</Texture>
			</Layer>
			<Layer level="OVERLAY">
				<Texture parentKey="tick">
					<Color r="1" g="0" b="0" a="1"/>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
				local title = [[GuideLines]]
				local text =
[[Left-click and drag from a ruler onto the screen to create a new guide.

Drag guides onto a ruler to delete them.

Right-click on a ruler to move it to the other side of the screen if it is in the way.

Type "/guidelines" to hide all rulers and guides.]]
				
				GameTooltip_SetDefaultAnchor(GameTooltip, self)
				GameTooltip:AddLine(title, HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b, 1)
				GameTooltip:AddLine(text, NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b, 1)
				GameTooltip:Show()
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide()
			</OnLeave>
			<OnDragStart>
				CreateFrame("Button", nil, self, self.template)
			</OnDragStart>
		</Scripts>
	</Button>
	
	
	<!-- END TEMPLATES -->
	
	<Button name="GuideLines_HorizRuler" inherits="GuideLines_RulerTemplate">
		<Anchors>
			<Anchor point="TOPLEFT"/>
			<Anchor point="TOPRIGHT"/>
		</Anchors>
		<Scripts>
			<OnLoad>
				self:RegisterForClicks("RightButtonUp")
				self:RegisterForDrag("LeftButton")
				self.point = -1
				self.template = "GuideLines_HorizGuideTemplate"
				self.tick:ClearAllPoints()
				self.tick:SetSize(2, GuideLines.rulersize)
				self:SetHeight(GuideLines.rulersize)
				
				self.ticks = {}
				for i = 0, self:GetWidth()/2 + 50, 50 do
					local t = self:CreateTexture(nil, "OVERLAY")
					t:SetSize(1, self:GetHeight())
					t:SetPoint("CENTER", self, "CENTER", i, 0)
					t:SetTexture(0, 0, 0, 1)
					local f = self:CreateFontString(nil, "OVERLAY", "GameFontNormalSmall")
					f:SetPoint("LEFT", self, "CENTER", i, 0)
					f:SetText(i)
					
					local t = self:CreateTexture(nil, "OVERLAY")
					t:SetSize(1, self:GetHeight())
					t:SetPoint("CENTER", self, "CENTER", -i, 0)
					t:SetTexture(0, 0, 0, 1)
					if i ~= 0 then
						local f = self:CreateFontString(nil, "OVERLAY", "GameFontNormalSmall")
						f:SetPoint("LEFT", self, "CENTER", -i, 0)
						f:SetText(i)
					end
				end

			</OnLoad>
			<OnClick>
				if button == "RightButton" then
					self:ClearAllPoints()
					if self.point == 1 then
						self:SetPoint("TOPLEFT")
						self:SetPoint("TOPRIGHT")
					else
						self:SetPoint("BOTTOMLEFT")
						self:SetPoint("BOTTOMRIGHT")
					end
					self.point = -self.point
				end
			</OnClick>
			<OnUpdate>
				self.tick:SetPoint("TOPLEFT", self, "TOPLEFT", GetCursorPosition()/UIParent:GetScale(), 0)
			</OnUpdate>
		</Scripts>
	</Button>
	
	<Button name="GuideLines_VertRuler" inherits="GuideLines_RulerTemplate">
			<Anchors>
				<Anchor point="TOPLEFT"/>
				<Anchor point="BOTTOMLEFT"/>
			</Anchors>
			<Scripts>
				<OnLoad>
					self:RegisterForClicks("RightButtonUp")
					self:RegisterForDrag("LeftButton")
					self.point = -1
					self.template = "GuideLines_VertGuideTemplate"
					self.tick:ClearAllPoints()
					self.tick:SetSize(GuideLines.rulersize, 2)
					self:SetWidth(GuideLines.rulersize)
					
					self.ticks = {}
					for i = 0, self:GetHeight()/2 + 50, 50 do
						local t = self:CreateTexture(nil, "OVERLAY")
						t:SetSize(self:GetWidth(), 1)
						t:SetPoint("CENTER", self, "CENTER", 0, i)
						t:SetTexture(0, 0, 0, 1)
						local f = self:CreateFontString(nil, "OVERLAY", "GameFontNormalSmall")
						f:SetPoint("TOP", self, "CENTER", 0, i)
						f:SetText(i)
						
						local t = self:CreateTexture(nil, "OVERLAY")
						t:SetSize(self:GetWidth(), 1)
						t:SetPoint("CENTER", self, "CENTER", 0, -i)
						t:SetTexture(0, 0, 0, 1)
						if i ~= 0 then
							local f = self:CreateFontString(nil, "OVERLAY", "GameFontNormalSmall")
							f:SetPoint("TOP", self, "CENTER", 0, -i)
							f:SetText(i)
						end
					end

				</OnLoad>
				<OnClick>
					if button == "RightButton" then
						self:ClearAllPoints()
						if self.point == 1 then
							self:SetPoint("TOPLEFT")
							self:SetPoint("BOTTOMLEFT")
						else
							self:SetPoint("TOPRIGHT")
							self:SetPoint("BOTTOMRIGHT")
						end
						self.point = -self.point
					end
				</OnClick>
				<OnUpdate>
					self.tick:SetPoint("BOTTOMLEFT", self, "BOTTOMLEFT", 0, select(2, GetCursorPosition())/UIParent:GetScale())
				</OnUpdate>
			</Scripts>
		</Button>



</Ui>




